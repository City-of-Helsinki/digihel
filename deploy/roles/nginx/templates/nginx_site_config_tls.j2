{% if nginx_redirect_to_encrypted|default(True) %}
server {
        listen {{ nginx_listen_port|default(80) }};
        # This is tricksy, examples show ipv6only=no, but that must only be
        # set at default host (same applies to any other listen options)
        listen [::]:{{ nginx_listen_port|default(80) }};

        server_name {{ nginx_virtualhost }};

        # Supports Let's Encrypt certificate (re-)issuance process
        # /srv/letsencrypt/challenges only needs to be readable
        # by the web server process
        location /.well-known/acme-challenge/ {
                alias /srv/letsencrypt/challenges;
                try_files $uri @forward_https;
        }

        # These two handle forwarding to TLS protected URI
        # for all other cases
        location @forward_https {
                return 301   https://$host$request_uri;
        }
        location / {
                return 301   https://$host$request_uri;
        }
}
{% endif %}
server {
        listen {{ nginx_tls_listen_port|default(443) }} ssl;

        # SSL config, ignore issing certificate. Needed to initially start
	# without cert for Let's Encrypt process
        ssl_certificate {{ nginx_certchain }};
        ssl_certificate_key {{ nginx_privkey }};
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;

        # Diffie-Hellman parameter for DHE ciphersuites, recommended 2048
        # bits
        ssl_dhparam /etc/ssl/dhparam.pem;

        # intermediate configuration
        ssl_protocols TLSv1 TLSv1.1 TLSv1.2;
        ssl_ciphers 'ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:ECDHE-RSA-DES-CBC3-SHA:ECDHE-ECDSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA';
        ssl_prefer_server_ciphers on;

        # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
	# disabled by default, due to risks
        # add_header Strict-Transport-Security max-age=15768000;

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;

        root /home/{{ nginx_site_user }}/{{ nginx_site_appdir }}/dist;
        index index.html index.htm;

{% include nginx_fragment_file|default("non_existent") ignore missing %}

        # HTTP-Host:
        server_name {{ nginx_virtualhost }};

	# public files that do not directly belong to the application
	# like accessibility statements or robots.txt
        location {{ "/" + nginx_url_prefix if nginx_url_prefix is defined else "" }}/public/ {
                alias /home/{{ nginx_site_user }}/public/;
        }

        location {{ "/" + nginx_url_prefix if nginx_url_prefix is defined else "" }}/static/ {
                alias /home/{{ nginx_site_user }}/static/;
        }

        # Media files uploaded by users
        location {{ "/" + nginx_url_prefix if nginx_url_prefix is defined else "" }}/media/ {
                alias /home/{{ nginx_site_user }}/media/;
        }

        location {{ "/" + nginx_url_prefix if nginx_url_prefix is defined else "" }}/ {
            include uwsgi_params;
            {% if nginx_contract_port is defined %}
            uwsgi_pass 127.0.0.1:{{ nginx_contract_port }};
            {% elif nginx_contract_socket is defined %}
            uwsgi_pass unix://{{ nginx_contract_socket }};
            {% endif -%}
        }

        # Used for Let's Encrypt certificate (re-)issuance process
        location /.well-known/acme-challenge {
            alias /srv/letsencrypt/challenges;
        }
}
